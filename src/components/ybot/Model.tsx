/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { VFC } from 'react';
import * as THREE from 'three';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';
import { useSnapshot } from 'valtio';
import { useGLTF, useMatcapTexture } from '@react-three/drei';
import { modelState } from './store';
import { useAnimation } from './useAnimation';

type GLTFResult = GLTF & {
	nodes: {
		Alpha_Joints: THREE.SkinnedMesh
		Alpha_Surface: THREE.SkinnedMesh
		mixamorigHips: THREE.Bone
	}
	materials: {
		Alpha_Joints_MAT: THREE.MeshStandardMaterial
		Alpha_Body_MAT: THREE.MeshStandardMaterial
	}
}

const ModelPath = '/assets/ybot.glb'

export const Model: VFC<JSX.IntrinsicElements['group']> = props => {
	const modelSnap = useSnapshot(modelState)
	const { nodes, materials } = useGLTF(ModelPath) as GLTFResult

	const groupRef = useAnimation()

	const [matcapBody] = useMatcapTexture(modelSnap.texture.body, 512)
	const [matcapJoints] = useMatcapTexture(modelSnap.texture.joint, 512)

	return (
		<group ref={groupRef} {...props} dispose={null}>
			<group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.02}>
				<primitive object={nodes.mixamorigHips} />
				{/* Joints */}
				<skinnedMesh
					castShadow
					geometry={nodes.Alpha_Joints.geometry}
					material={materials.Alpha_Joints_MAT}
					skeleton={nodes.Alpha_Joints.skeleton}>
					<meshMatcapMaterial attach="material" matcap={matcapJoints} />
				</skinnedMesh>
				{/* Body */}
				<skinnedMesh
					castShadow
					geometry={nodes.Alpha_Surface.geometry}
					material={materials.Alpha_Body_MAT}
					skeleton={nodes.Alpha_Surface.skeleton}>
					<meshMatcapMaterial attach="material" matcap={matcapBody} />
				</skinnedMesh>
			</group>
		</group>
	)
}
useGLTF.preload(ModelPath)
